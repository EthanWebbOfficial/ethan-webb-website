{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n *\n * @typedef Options\n * @property {boolean} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar (`boolean`, default:\n *   `true`).\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { types } from 'micromark-util-symbol/types.js';\n\n/**\n * @param {Options} [options]\n * @returns {Construct}\n */\nexport function mathText() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  let single = options.singleDollarTextMath;\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    tokenize: tokenizeMathText,\n    resolve: resolveMathText,\n    previous\n  };\n\n  /** @type {Tokenizer} */\n  function tokenizeMathText(effects, ok, nok) {\n    const self = this;\n    let sizeOpen = 0;\n    /** @type {number} */\n    let size;\n    /** @type {Token} */\n    let token;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.dollarSign, 'expected `$`');\n      assert(previous.call(self, self.previous), 'expected correct previous');\n      effects.enter('mathText');\n      effects.enter('mathTextSequence');\n      return openingSequence(code);\n    }\n\n    /** @type {State} */\n    function openingSequence(code) {\n      if (code === codes.dollarSign) {\n        effects.consume(code);\n        sizeOpen++;\n        return openingSequence;\n      }\n      if (sizeOpen < 2 && !single) return nok(code);\n      effects.exit('mathTextSequence');\n      return gap(code);\n    }\n\n    /** @type {State} */\n    function gap(code) {\n      if (code === codes.eof) {\n        return nok(code);\n      }\n\n      // Closing fence?\n      // Could also be data.\n      if (code === codes.dollarSign) {\n        token = effects.enter('mathTextSequence');\n        size = 0;\n        return closingSequence(code);\n      }\n\n      // Tabs don’t work, and virtual spaces don’t make sense.\n      if (code === codes.space) {\n        effects.enter('space');\n        effects.consume(code);\n        effects.exit('space');\n        return gap;\n      }\n      if (markdownLineEnding(code)) {\n        effects.enter(types.lineEnding);\n        effects.consume(code);\n        effects.exit(types.lineEnding);\n        return gap;\n      }\n\n      // Data.\n      effects.enter('mathTextData');\n      return data(code);\n    }\n\n    // In math.\n    /** @type {State} */\n    function data(code) {\n      if (code === codes.eof || code === codes.space || code === codes.dollarSign || markdownLineEnding(code)) {\n        effects.exit('mathTextData');\n        return gap(code);\n      }\n      effects.consume(code);\n      return data;\n    }\n\n    // Closing fence.\n    /** @type {State} */\n    function closingSequence(code) {\n      // More.\n      if (code === codes.dollarSign) {\n        effects.consume(code);\n        size++;\n        return closingSequence;\n      }\n\n      // Done!\n      if (size === sizeOpen) {\n        effects.exit('mathTextSequence');\n        effects.exit('mathText');\n        return ok(code);\n      }\n\n      // More or less accents: mark as data.\n      token.type = 'mathTextData';\n      return data(code);\n    }\n  }\n}\n\n/** @type {Resolver} */\nfunction resolveMathText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number|undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === types.lineEnding || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === types.lineEnding || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'mathTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = 'mathTextPadding';\n        events[headEnterIndex][1].type = 'mathTextPadding';\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== types.lineEnding) {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === types.lineEnding) {\n      events[enter][1].type = 'mathTextData';\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/** @type {Previous} */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== codes.dollarSign || this.events[this.events.length - 1][1].type === types.characterEscape;\n}","map":{"version":3,"names":["ok","assert","markdownLineEnding","codes","types","mathText","options","single","singleDollarTextMath","undefined","tokenize","tokenizeMathText","resolve","resolveMathText","previous","effects","nok","self","sizeOpen","size","token","start","code","dollarSign","call","enter","openingSequence","consume","exit","gap","eof","closingSequence","space","lineEnding","data","type","events","tailExitIndex","length","headEnterIndex","index","end","splice","characterEscape"],"sources":["D:/Ethan_Webb_Personal_Website/ethan-website/node_modules/micromark-extension-math/dev/lib/math-text.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Construct} Construct\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n * @typedef {import('micromark-util-types').Previous} Previous\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n *\n * @typedef Options\n * @property {boolean} [singleDollarTextMath=true]\n *   Whether to support math (text) with a single dollar (`boolean`, default:\n *   `true`).\n *   Single dollars work in Pandoc and many other places, but often interfere\n *   with “normal” dollars in text.\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {markdownLineEnding} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {types} from 'micromark-util-symbol/types.js'\n\n/**\n * @param {Options} [options]\n * @returns {Construct}\n */\nexport function mathText(options = {}) {\n  let single = options.singleDollarTextMath\n\n  if (single === null || single === undefined) {\n    single = true\n  }\n\n  return {\n    tokenize: tokenizeMathText,\n    resolve: resolveMathText,\n    previous\n  }\n\n  /** @type {Tokenizer} */\n  function tokenizeMathText(effects, ok, nok) {\n    const self = this\n    let sizeOpen = 0\n    /** @type {number} */\n    let size\n    /** @type {Token} */\n    let token\n\n    return start\n\n    /** @type {State} */\n    function start(code) {\n      assert(code === codes.dollarSign, 'expected `$`')\n      assert(previous.call(self, self.previous), 'expected correct previous')\n      effects.enter('mathText')\n      effects.enter('mathTextSequence')\n      return openingSequence(code)\n    }\n\n    /** @type {State} */\n    function openingSequence(code) {\n      if (code === codes.dollarSign) {\n        effects.consume(code)\n        sizeOpen++\n        return openingSequence\n      }\n\n      if (sizeOpen < 2 && !single) return nok(code)\n      effects.exit('mathTextSequence')\n      return gap(code)\n    }\n\n    /** @type {State} */\n    function gap(code) {\n      if (code === codes.eof) {\n        return nok(code)\n      }\n\n      // Closing fence?\n      // Could also be data.\n      if (code === codes.dollarSign) {\n        token = effects.enter('mathTextSequence')\n        size = 0\n        return closingSequence(code)\n      }\n\n      // Tabs don’t work, and virtual spaces don’t make sense.\n      if (code === codes.space) {\n        effects.enter('space')\n        effects.consume(code)\n        effects.exit('space')\n        return gap\n      }\n\n      if (markdownLineEnding(code)) {\n        effects.enter(types.lineEnding)\n        effects.consume(code)\n        effects.exit(types.lineEnding)\n        return gap\n      }\n\n      // Data.\n      effects.enter('mathTextData')\n      return data(code)\n    }\n\n    // In math.\n    /** @type {State} */\n    function data(code) {\n      if (\n        code === codes.eof ||\n        code === codes.space ||\n        code === codes.dollarSign ||\n        markdownLineEnding(code)\n      ) {\n        effects.exit('mathTextData')\n        return gap(code)\n      }\n\n      effects.consume(code)\n      return data\n    }\n\n    // Closing fence.\n    /** @type {State} */\n    function closingSequence(code) {\n      // More.\n      if (code === codes.dollarSign) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      // Done!\n      if (size === sizeOpen) {\n        effects.exit('mathTextSequence')\n        effects.exit('mathText')\n        return ok(code)\n      }\n\n      // More or less accents: mark as data.\n      token.type = 'mathTextData'\n      return data(code)\n    }\n  }\n}\n\n/** @type {Resolver} */\nfunction resolveMathText(events) {\n  let tailExitIndex = events.length - 4\n  let headEnterIndex = 3\n  /** @type {number} */\n  let index\n  /** @type {number|undefined} */\n  let enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === types.lineEnding ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === types.lineEnding ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'mathTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = 'mathTextPadding'\n        events[headEnterIndex][1].type = 'mathTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (\n        index !== tailExitIndex &&\n        events[index][1].type !== types.lineEnding\n      ) {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === types.lineEnding\n    ) {\n      events[enter][1].type = 'mathTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\n/** @type {Previous} */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== codes.dollarSign ||\n    this.events[this.events.length - 1][1].type === types.characterEscape\n  )\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,EAAE,IAAIC,MAAM,QAAO,YAAY;AACvC,SAAQC,kBAAkB,QAAO,0BAA0B;AAC3D,SAAQC,KAAK,QAAO,gCAAgC;AACpD,SAAQC,KAAK,QAAO,gCAAgC;;AAEpD;AACA;AACA;AACA;AACA,OAAO,SAASC,QAAQ,GAAe;EAAA,IAAdC,OAAO,uEAAG,CAAC,CAAC;EACnC,IAAIC,MAAM,GAAGD,OAAO,CAACE,oBAAoB;EAEzC,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKE,SAAS,EAAE;IAC3CF,MAAM,GAAG,IAAI;EACf;EAEA,OAAO;IACLG,QAAQ,EAAEC,gBAAgB;IAC1BC,OAAO,EAAEC,eAAe;IACxBC;EACF,CAAC;;EAED;EACA,SAASH,gBAAgB,CAACI,OAAO,EAAEf,EAAE,EAAEgB,GAAG,EAAE;IAC1C,MAAMC,IAAI,GAAG,IAAI;IACjB,IAAIC,QAAQ,GAAG,CAAC;IAChB;IACA,IAAIC,IAAI;IACR;IACA,IAAIC,KAAK;IAET,OAAOC,KAAK;;IAEZ;IACA,SAASA,KAAK,CAACC,IAAI,EAAE;MACnBrB,MAAM,CAACqB,IAAI,KAAKnB,KAAK,CAACoB,UAAU,EAAE,cAAc,CAAC;MACjDtB,MAAM,CAACa,QAAQ,CAACU,IAAI,CAACP,IAAI,EAAEA,IAAI,CAACH,QAAQ,CAAC,EAAE,2BAA2B,CAAC;MACvEC,OAAO,CAACU,KAAK,CAAC,UAAU,CAAC;MACzBV,OAAO,CAACU,KAAK,CAAC,kBAAkB,CAAC;MACjC,OAAOC,eAAe,CAACJ,IAAI,CAAC;IAC9B;;IAEA;IACA,SAASI,eAAe,CAACJ,IAAI,EAAE;MAC7B,IAAIA,IAAI,KAAKnB,KAAK,CAACoB,UAAU,EAAE;QAC7BR,OAAO,CAACY,OAAO,CAACL,IAAI,CAAC;QACrBJ,QAAQ,EAAE;QACV,OAAOQ,eAAe;MACxB;MAEA,IAAIR,QAAQ,GAAG,CAAC,IAAI,CAACX,MAAM,EAAE,OAAOS,GAAG,CAACM,IAAI,CAAC;MAC7CP,OAAO,CAACa,IAAI,CAAC,kBAAkB,CAAC;MAChC,OAAOC,GAAG,CAACP,IAAI,CAAC;IAClB;;IAEA;IACA,SAASO,GAAG,CAACP,IAAI,EAAE;MACjB,IAAIA,IAAI,KAAKnB,KAAK,CAAC2B,GAAG,EAAE;QACtB,OAAOd,GAAG,CAACM,IAAI,CAAC;MAClB;;MAEA;MACA;MACA,IAAIA,IAAI,KAAKnB,KAAK,CAACoB,UAAU,EAAE;QAC7BH,KAAK,GAAGL,OAAO,CAACU,KAAK,CAAC,kBAAkB,CAAC;QACzCN,IAAI,GAAG,CAAC;QACR,OAAOY,eAAe,CAACT,IAAI,CAAC;MAC9B;;MAEA;MACA,IAAIA,IAAI,KAAKnB,KAAK,CAAC6B,KAAK,EAAE;QACxBjB,OAAO,CAACU,KAAK,CAAC,OAAO,CAAC;QACtBV,OAAO,CAACY,OAAO,CAACL,IAAI,CAAC;QACrBP,OAAO,CAACa,IAAI,CAAC,OAAO,CAAC;QACrB,OAAOC,GAAG;MACZ;MAEA,IAAI3B,kBAAkB,CAACoB,IAAI,CAAC,EAAE;QAC5BP,OAAO,CAACU,KAAK,CAACrB,KAAK,CAAC6B,UAAU,CAAC;QAC/BlB,OAAO,CAACY,OAAO,CAACL,IAAI,CAAC;QACrBP,OAAO,CAACa,IAAI,CAACxB,KAAK,CAAC6B,UAAU,CAAC;QAC9B,OAAOJ,GAAG;MACZ;;MAEA;MACAd,OAAO,CAACU,KAAK,CAAC,cAAc,CAAC;MAC7B,OAAOS,IAAI,CAACZ,IAAI,CAAC;IACnB;;IAEA;IACA;IACA,SAASY,IAAI,CAACZ,IAAI,EAAE;MAClB,IACEA,IAAI,KAAKnB,KAAK,CAAC2B,GAAG,IAClBR,IAAI,KAAKnB,KAAK,CAAC6B,KAAK,IACpBV,IAAI,KAAKnB,KAAK,CAACoB,UAAU,IACzBrB,kBAAkB,CAACoB,IAAI,CAAC,EACxB;QACAP,OAAO,CAACa,IAAI,CAAC,cAAc,CAAC;QAC5B,OAAOC,GAAG,CAACP,IAAI,CAAC;MAClB;MAEAP,OAAO,CAACY,OAAO,CAACL,IAAI,CAAC;MACrB,OAAOY,IAAI;IACb;;IAEA;IACA;IACA,SAASH,eAAe,CAACT,IAAI,EAAE;MAC7B;MACA,IAAIA,IAAI,KAAKnB,KAAK,CAACoB,UAAU,EAAE;QAC7BR,OAAO,CAACY,OAAO,CAACL,IAAI,CAAC;QACrBH,IAAI,EAAE;QACN,OAAOY,eAAe;MACxB;;MAEA;MACA,IAAIZ,IAAI,KAAKD,QAAQ,EAAE;QACrBH,OAAO,CAACa,IAAI,CAAC,kBAAkB,CAAC;QAChCb,OAAO,CAACa,IAAI,CAAC,UAAU,CAAC;QACxB,OAAO5B,EAAE,CAACsB,IAAI,CAAC;MACjB;;MAEA;MACAF,KAAK,CAACe,IAAI,GAAG,cAAc;MAC3B,OAAOD,IAAI,CAACZ,IAAI,CAAC;IACnB;EACF;AACF;;AAEA;AACA,SAAST,eAAe,CAACuB,MAAM,EAAE;EAC/B,IAAIC,aAAa,GAAGD,MAAM,CAACE,MAAM,GAAG,CAAC;EACrC,IAAIC,cAAc,GAAG,CAAC;EACtB;EACA,IAAIC,KAAK;EACT;EACA,IAAIf,KAAK;;EAET;EACA,IACE,CAACW,MAAM,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,CAACJ,IAAI,KAAK/B,KAAK,CAAC6B,UAAU,IAClDG,MAAM,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,CAACJ,IAAI,KAAK,OAAO,MAC3CC,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACF,IAAI,KAAK/B,KAAK,CAAC6B,UAAU,IACjDG,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACF,IAAI,KAAK,OAAO,CAAC,EAC5C;IACAK,KAAK,GAAGD,cAAc;;IAEtB;IACA,OAAO,EAAEC,KAAK,GAAGH,aAAa,EAAE;MAC9B,IAAID,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,KAAK,cAAc,EAAE;QAC5C;QACAC,MAAM,CAACC,aAAa,CAAC,CAAC,CAAC,CAAC,CAACF,IAAI,GAAG,iBAAiB;QACjDC,MAAM,CAACG,cAAc,CAAC,CAAC,CAAC,CAAC,CAACJ,IAAI,GAAG,iBAAiB;QAClDI,cAAc,IAAI,CAAC;QACnBF,aAAa,IAAI,CAAC;QAClB;MACF;IACF;EACF;;EAEA;EACAG,KAAK,GAAGD,cAAc,GAAG,CAAC;EAC1BF,aAAa,EAAE;EAEf,OAAO,EAAEG,KAAK,IAAIH,aAAa,EAAE;IAC/B,IAAIZ,KAAK,KAAKhB,SAAS,EAAE;MACvB,IACE+B,KAAK,KAAKH,aAAa,IACvBD,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,KAAK/B,KAAK,CAAC6B,UAAU,EAC1C;QACAR,KAAK,GAAGe,KAAK;MACf;IACF,CAAC,MAAM,IACLA,KAAK,KAAKH,aAAa,IACvBD,MAAM,CAACI,KAAK,CAAC,CAAC,CAAC,CAAC,CAACL,IAAI,KAAK/B,KAAK,CAAC6B,UAAU,EAC1C;MACAG,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAACU,IAAI,GAAG,cAAc;MAEtC,IAAIK,KAAK,KAAKf,KAAK,GAAG,CAAC,EAAE;QACvBW,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC,CAACgB,GAAG,GAAGL,MAAM,CAACI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,GAAG;QAC/CL,MAAM,CAACM,MAAM,CAACjB,KAAK,GAAG,CAAC,EAAEe,KAAK,GAAGf,KAAK,GAAG,CAAC,CAAC;QAC3CY,aAAa,IAAIG,KAAK,GAAGf,KAAK,GAAG,CAAC;QAClCe,KAAK,GAAGf,KAAK,GAAG,CAAC;MACnB;MAEAA,KAAK,GAAGhB,SAAS;IACnB;EACF;EAEA,OAAO2B,MAAM;AACf;;AAEA;AACA,SAAStB,QAAQ,CAACQ,IAAI,EAAE;EACtB;EACA,OACEA,IAAI,KAAKnB,KAAK,CAACoB,UAAU,IACzB,IAAI,CAACa,MAAM,CAAC,IAAI,CAACA,MAAM,CAACE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAACH,IAAI,KAAK/B,KAAK,CAACuC,eAAe;AAEzE"},"metadata":{},"sourceType":"module","externalDependencies":[]}